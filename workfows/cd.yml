name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository_owner }}
  IMAGE_NAME: edgevision-guard

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
    
    # Build and push inference service (x86_64)
    - name: Build and push inference service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        target: inference-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference:${{ steps.meta.outputs.version }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build and push dashboard (x86_64)
    - name: Build and push dashboard
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        target: dashboard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard:${{ steps.meta.outputs.version }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build and push training image (x86_64)
    - name: Build and push training image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        target: training
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-training:${{ steps.meta.outputs.version }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-training:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build and push edge inference service (multi-arch)
    - name: Build and push edge inference service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.edge
        target: inference-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference-edge:${{ steps.meta.outputs.version }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference-edge:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build and push edge dashboard (multi-arch)
    - name: Build and push edge dashboard
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.edge
        target: dashboard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard-edge:${{ steps.meta.outputs.version }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard-edge:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.1.0
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          # EdgeVision-Guard ${{ github.ref_name }}
          
          ## What's New
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Images
          
          ### Cloud Deployment
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference:${{ steps.meta.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard:${{ steps.meta.outputs.version }}
          ```
          
          ### Edge Deployment (Raspberry Pi / Jetson Nano)
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-inference-edge:${{ steps.meta.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.IMAGE_NAME }}-dashboard-edge:${{ steps.meta.outputs.version }}
          ```
          
          ## Quick Start
          
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd ${{ env.IMAGE_NAME }}
          
          # Start the services
          docker-compose up -d
          ```
          
          For edge devices:
          ```bash
          docker-compose -f docker-compose.edge.yml up -d
          ```
        draft: false
        prerelease: false