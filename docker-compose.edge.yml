version: '3.8'

services:
  inference-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: inference-service
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-yourusername}/${IMAGE_NAME:-edgevision-guard}-inference-edge:${IMAGE_TAG:-latest}
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./.env:/app/.env
    environment:
      - MODEL_PATH=/app/models/fall_detector_quantized.onnx
      - USE_GPU=false
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.7}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: dashboard
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-yourusername}/${IMAGE_NAME:-edgevision-guard}-dashboard-edge:${IMAGE_TAG:-latest}
    ports:
      - "8501:8501"
    volumes:
      - ./models:/app/models
      - ./.env:/app/.env
    environment:
      - INFERENCE_SERVICE_URL=http://inference-service:8000
      - WEBSOCKET_URL=ws://inference-service:8000/ws
    depends_on:
      - inference-service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

# Service for capturing video from a camera on the edge device
  camera-capture:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: base
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-yourusername}/${IMAGE_NAME:-edgevision-guard}-camera-edge:${IMAGE_TAG:-latest}
    volumes:
      - ./.env:/app/.env
    devices:
      - /dev/video0:/dev/video0  # Map camera device
    environment:
      - INFERENCE_SERVICE_URL=http://inference-service:8000
    command: >
      python -c "
      import cv2
      import requests
      import time
      import os
      
      # Configuration
      INFERENCE_URL = os.environ.get('INFERENCE_SERVICE_URL', 'http://inference-service:8000') + '/predict'
      CAMERA_ID = int(os.environ.get('CAMERA_ID', '0'))
      FPS = int(os.environ.get('CAPTURE_FPS', '5'))
      
      # Initialize camera
      print(f'Initializing camera {CAMERA_ID}')
      cap = cv2.VideoCapture(CAMERA_ID)
      
      if not cap.isOpened():
          print('Error: Could not open camera')
          exit(1)
          
      print(f'Camera initialized, streaming at {FPS} FPS')
      
      # Main loop
      try:
          while True:
              # Capture frame
              ret, frame = cap.read()
              if not ret:
                  print('Error: Could not read frame')
                  time.sleep(1)
                  continue
                  
              # Convert to JPEG
              _, buffer = cv2.imencode('.jpg', frame)
              
              # Send to inference service
              try:
                  response = requests.post(
                      INFERENCE_URL,
                      files={'file': ('frame.jpg', buffer.tobytes(), 'image/jpeg')},
                      timeout=1
                  )
                  
                  if response.status_code == 200:
                      result = response.json()
                      # Print prediction if it's a fall
                      if result.get('anomaly_score', 0) > 0.7:
                          print(f'ALERT: {result.get(\"class_name\", \"Unknown\")} detected! Score: {result.get(\"anomaly_score\", 0):.2f}')
                  else:
                      print(f'Error from inference service: {response.status_code}')
              except Exception as e:
                  print(f'Error sending frame: {e}')
                  
              # Sleep to maintain FPS
              time.sleep(1/FPS)
              
      except KeyboardInterrupt:
          print('Stopping camera capture')
      finally:
          cap.release()
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

# Systemd service configuration
  systemd-config:
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: base
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-yourusername}/${IMAGE_NAME:-edgevision-guard}-systemd:${IMAGE_TAG:-latest}
    volumes:
      - ./deployment:/app/deployment
    command: >
      bash -c "
      # Create systemd service file
      cat > /app/deployment/edgevision-guard.service << 'EOF'
      [Unit]
      Description=EdgeVision-Guard Fall Detection Service
      After=network.target
      
      [Service]
      Type=simple
      User=pi
      WorkingDirectory=/home/pi/edgevision-guard
      ExecStart=/usr/bin/docker-compose -f docker-compose.edge.yml up
      ExecStop=/usr/bin/docker-compose -f docker-compose.edge.yml down
      Restart=on-failure
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      # Create installation script
      cat > /app/deployment/install.sh << 'EOF'
      #!/bin/bash
      set -e
      
      echo 'Installing EdgeVision-Guard...'
      
      # Check for Docker
      if ! command -v docker &> /dev/null; then
          echo 'Docker not found. Installing Docker...'
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER
      fi
      
      # Check for Docker Compose
      if ! command -v docker-compose &> /dev/null; then
          echo 'Docker Compose not found. Installing Docker Compose...'
          sudo apt-get update
          sudo apt-get install -y docker-compose
      fi
      
      # Copy systemd service file
      sudo cp edgevision-guard.service /etc/systemd/system/
      sudo systemctl daemon-reload
      
      # Enable and start service
      sudo systemctl enable edgevision-guard.service
      sudo systemctl start edgevision-guard.service
      
      echo 'EdgeVision-Guard installed and started!'
      echo 'Check status with: sudo systemctl status edgevision-guard'
      EOF
      
      # Make install script executable
      chmod +x /app/deployment/install.sh
      
      echo 'Generated systemd service file and installation script in deployment/'
      "
    profiles:
      - deployment